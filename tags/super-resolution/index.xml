<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Super Resolution on Hi! I'm Tam Le</title><link>https://incenger.github.io/tags/super-resolution/</link><description>Recent content in Super Resolution on Hi! I'm Tam Le</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><copyright>&lt;a href="https://creativecommons.org/licenses/by-nc/4.0/" target="_blank" rel="noopener">CC BY-NC 4.0&lt;/a></copyright><lastBuildDate>Sun, 04 Jul 2021 11:43:10 +0700</lastBuildDate><atom:link href="https://incenger.github.io/tags/super-resolution/index.xml" rel="self" type="application/rss+xml"/><item><title>Efficient Sub-pixel Convolution</title><link>https://incenger.github.io/posts/2021/07/efficient_subpixel_conv/</link><pubDate>Sun, 04 Jul 2021 11:43:10 +0700</pubDate><guid>https://incenger.github.io/posts/2021/07/efficient_subpixel_conv/</guid><description>The efficient sub-pixel convolution is proposed in 1 and explained in details in 2. Since it was introduced, the method has quickly becam the most popular choice for upsampling layer in Super Resolution networks. IMHO, the explanation in 2 is very difficult to follow because the way sub-pixel convolution (or Transpose Convolution) is performed in that paper is very confusing.
In short, the efficient sub-pixel convolution is just a more efficient way to do sub-pixel convolution.</description></item></channel></rss>